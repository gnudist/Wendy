#
# CAPTCHA module
# 

use strict;

package captcha;

use File::Spec::Functions;
use File::Path;
use Wendy::Db;

our $MODULENAME = 'captcha';

our $DESCRIPTION = 'CAPTCHA';
our $AUTHOR = 'ek';

sub module_info
{
	return ( 'Description' => $DESCRIPTION,
		 'Author' => $AUTHOR );
}

our @CONTENTS = ( 
    		  {
			  fname       => 'mod_captcha_test',
			  destination => '%HOSTTPLDIR%'
		      },
		  {
			  fname       => 'mod_captcha_test.pl',
			  destination => '%HOSTLIBDIR%'
		      },
		  
		  {
			  fname       => 'Captcha.pm',
			  destination => '%MODULESDIR%',
			  onlyonce    => 'true'
		      } );

our @MOREDIRS = ( 'var', 'test' );
our @REQLIST = qw( GD::SecurityImage
                   URI
		   File::Util );
our $CREATEADDRS = 0;

#######################################################################################
# No installation handler correction required in most cases. Just fill above variables.
#######################################################################################











################################################################################
# Installation handlers
################################################################################

use Wendy::Modules;
use Wendy::Config;
use Wendy::Util ( 'meta_get_records', 'perl_module_available' );
use Wendy::Db;

use File::Copy;

sub install
{
	my %args = @_;

	my ( $force_install,
	     $install_host ) = @args{ "Force",
				      "Host" };

	my $halt_on_errors = 1;
	if( $force_install )
	{
		$halt_on_errors = 0;
	}

	my $error = 0;
	my $errmsg = 'Success' . "\n";
	{
		my @reqlist_nf = ();
		
		
		foreach my $reqname ( @REQLIST )
		{
			unless( &perl_module_available( $reqname ) )
			{
				push @reqlist_nf, $reqname;
			}
		}

		if( scalar @reqlist_nf )
		{
			$errmsg = "<p>Following Perl modules are required by this module:<p>" . join( "<br>", @reqlist_nf );

			if( $halt_on_errors )
			{
				$error = 99;
				goto Uz3706IUps;
			}
		}
	}


	my %already_installed = &is_installed( $MODULENAME );

	# Generic copy files to installation host's directory.
	{
		
		my %host = &meta_get_records( 'Table' => 'host',
					      'Fields' => [ 'id', 'host' ],
					      'Where' => sprintf( 'id=%s', &dbquote( $install_host ) ) );
		
		
		unless( scalar keys %host )
		{
			$error = 100;
			$errmsg = 'Bad installation host.';
			goto Uz3706IUps;
		}
		
		
		my $hostlibdir = catdir( CONF_VARPATH, 'hosts', $host{ $install_host } -> { "host" }, 'lib' );
		my $hosttpldir = catdir( CONF_VARPATH, 'hosts', $host{ $install_host } -> { "host" }, 'tpl' );
		my $modulesdir = catdir( CONF_MYPATH, 'lib', 'Wendy', 'Modules' );
		my $modresdir = catdir( CONF_VARPATH, 'hosts', $host{ $install_host } -> { "host" }, 'htdocs', 'mod', $MODULENAME, 'res' );
		my $htdocs_mod_dir = catdir( CONF_VARPATH, 'hosts', $host{ $install_host} -> { "host" }, 'htdocs', 'mod', $MODULENAME );

		foreach my $dirtomake ( $htdocs_mod_dir, $modresdir )
		{
			unless( mkdir( $dirtomake ) )
			{
				$errmsg = 'Cant create mod directory in htdocs, ' . $dirtomake . ': ' . $!;
				if( $halt_on_errors )
				{
					$error = 130;
					goto Uz3706IUps;
				}
			}
			$errmsg .= 'mkdir ' . $dirtomake . "\n";
		}

		if( $CREATEADDRS )
		{
			my $addrflag = File::Spec -> catfile( $htdocs_mod_dir, 'wendyaddr' );
			touch( $addrflag );
		}

		foreach my $dir ( @MOREDIRS )
		{
			my $dirtomake = catdir( $htdocs_mod_dir, $dir );

			unless( mkdir( $dirtomake ) )
			{
				$errmsg = 'Cant create mod directory in htdocs, ' . $dirtomake . ': ' . $!;
				if( $halt_on_errors )
				{
					$error = 135;
					goto Uz3706IUps;
				}
			}

			if( $CREATEADDRS )
			{
				my $addrflag = File::Spec -> catfile( $dirtomake, 'wendyaddr' );
				touch( $addrflag );
			}

			$errmsg .= 'mkdir ' . $dirtomake . "\n";

		}


rzOezL5CMtDZ837u:
		foreach my $frec ( @CONTENTS )
		{
			if( $frec -> { "onlyonce" } )
			{
				if( scalar keys %already_installed )
				{
					next rzOezL5CMtDZ837u;
				}
			}

			my $src = catfile( CONF_VARPATH, 'modules', $MODULENAME . '.data', $frec -> { "fname" } );
			my $dst = $frec -> { 'destination' };
			
			
			$dst =~ s/\Q%HOSTLIBDIR%\E/$hostlibdir/g;
			$dst =~ s/\Q%HOSTTPLDIR%\E/$hosttpldir/g;
			$dst =~ s/\Q%MODULESDIR%\E/$modulesdir/g;
			$dst =~ s/\Q%MODRESDIR%\E/$modresdir/g;

			$dst = catfile( $dst, $frec -> { "fname" } );

			


			if( -f $dst )
			{
				$errmsg .= "Skipped " .
				           $dst .
					   " as it already exists." .
					   "\n";
				if( $halt_on_errors )
				{
					$error = 119;
					next rzOezL5CMtDZ837u;
				}
			}
			
			unless( copy( $src, $dst ) )
			{

				$errmsg = 'Error copying file: ' .
				          $src . 
					  ' to ' .
					  $dst .
					  ': ' .
					  $!;
				if( $halt_on_errors )
				{
					$error = 120;
					goto Uz3706IUps;
				}
			}
			$errmsg .= 'Copy ' .
			           $src .
				   ' -> ' .
				   $dst .
				   "\n";
		}



	}

	# see if there is install.sql

	
	if( scalar keys %already_installed )
	{
		$errmsg .= '<p>Skipped install sql - already installed...';
	} else
	{
		my $src = catfile( CONF_VARPATH, 'modules', $MODULENAME . '.data', 'install.sql' );
		my $local_error = 0;

		if( -f $src )
		{
			$errmsg .= '<p>Found install.sql...';

			my $fh = undef;
			open( $fh, '<', $src ) or $local_error = 1;

			if( $local_error )
			{
				$error = 140;
				$errmsg .= $!;
				goto Uz3706IUps;
			}


			unless( &wdbdo( join( ' ', <$fh> ) ) )
			{
				$errmsg .= "SQL ERROR: " . &dbgeterror();
				if( $halt_on_errors )
				{
					$error = 150;
					goto Uz3706IUps;
				}
			}

			close $fh;
			$errmsg .= " OK<br>";
		}

	}

	# install-host.sql is run every installation and should contain host-specific stuff
	{
		my $src = catfile( CONF_VARPATH, 'modules', $MODULENAME . '.data', 'install-host.sql' );
		my $local_error = 0;
		
		if( -f $src )
		{
			$errmsg .= '<p>Found install-host.sql...';
			
			my $fh = undef;
			open( $fh, '<', $src ) or $local_error = 1;
			
			if( $local_error )
			{
				$error = 140;
				$errmsg .= $!;
				goto Uz3706IUps;
			}
			
			my $sql_code = join( ' ', <$fh> );
			$sql_code =~ s/\Q%HOSTID%\E/$install_host/g;

			unless( &wdbdo( $sql_code ) )
			{
				$errmsg .= "SQL ERROR: " . &dbgeterror();
				if( $halt_on_errors )
				{
					$error = 150;
					goto Uz3706IUps;
				}
			}
			
			close $fh;
			$errmsg .= " OK<br>";
		}

	}


Uz3706IUps:
	return [ $error, $errmsg ];
}

sub uninstall
{
	my %args = @_;

	my ( $force_uninstall,
	     $host ) = @args{ "Force",
			      "Host" };

	my $halt_on_errors = 0;
	if( $force_uninstall )
	{
		$halt_on_errors = 0;
	}

	my $error = 0;
	my $errmsg = 'Success' . "\n";
	my %already_installed = &is_installed( $MODULENAME );
	
        # Generic remove files.
	{
		
		my %host = &meta_get_records( 'Table' => 'host',
					      'Fields' => [ 'id', 'host' ],
					      'Where' => sprintf( 'id=%s', &dbquote( $host ) ) );
		
		unless( scalar keys %host )
		{
			$error = 100;
			$errmsg = 'Bad installation host.';
			goto Cybej3NWGR;
		}
		
		
		my $hostlibdir = catdir( CONF_VARPATH, 'hosts', $host{ $host } -> { "host" }, 'lib' );
		my $hosttpldir = catdir( CONF_VARPATH, 'hosts', $host{ $host } -> { "host" }, 'tpl' );
		my $modulesdir = catdir( CONF_MYPATH, 'lib', 'Wendy', 'Modules' );
		my $modresdir = catdir( CONF_VARPATH, 'hosts', $host{ $host } -> { "host" }, 'htdocs', 'mod', $MODULENAME, 'res' );

GZkxHyRsDdWZj3Ku:
		foreach my $frec ( @CONTENTS )
		{
			my $dst = $frec -> { 'destination' };
			
			$dst =~ s/\Q%HOSTLIBDIR%\E/$hostlibdir/g;
			$dst =~ s/\Q%HOSTTPLDIR%\E/$hosttpldir/g;
			$dst =~ s/\Q%MODULESDIR%\E/$modulesdir/g;
			$dst =~ s/\Q%MODRESDIR%\E/$modresdir/g;

			$dst = catfile( $dst, $frec -> { "fname" } );
			

			if( $frec -> { 'onlyonce' } )
			{
				if( scalar keys %already_installed > 1 )
				{
					next GZkxHyRsDdWZj3Ku;
				}
			}

			unless( unlink( $dst ) )
			{
				$errmsg = 'Error removing file: ' .
					  $dst .
					  ': ' .
					  $!;

				if( $halt_on_errors )
				{
					$error = 120;
					goto Cybej3NWGR;
				}
			}
			$errmsg .= 'Unlink ' . $dst . "\n";
		}

		my $htdocs_mod_dir = catdir( CONF_VARPATH, 'hosts', $host{ $host } -> { "host" }, 'htdocs', 'mod', $MODULENAME );


		if( $CREATEADDRS )
		{
			my $addrflag = File::Spec -> catfile( $htdocs_mod_dir, 'wendyaddr' );
			unlink( $addrflag );
		}

		foreach my $dir ( @MOREDIRS )
		{
			my $dirtorm = catdir( $htdocs_mod_dir, $dir );

			if( $CREATEADDRS )
			{
				my $addrflag = File::Spec -> catfile( $dirtorm, 'wendyaddr' );
				unlink( $addrflag );
			}

			unless( rmtree( $dirtorm ) )
			{
				$errmsg = 'Cant remove mod directory in htdocs, ' . $dirtorm . ': ' . $!;
				if( $halt_on_errors )
				{
					$error = 130;
					goto Cybej3NWGR;
				}
			}
			$errmsg .= 'Rmdir ' . $dirtorm . "\n";

		}

		foreach my $dirtorm ( $modresdir, $htdocs_mod_dir )
		{

			unless( rmdir( $dirtorm ) )
			{
				$errmsg = 'Cant remove mod directory in htdocs, ' . $dirtorm . ': ' . $!;
				if( $halt_on_errors )
				{
					$error = 130;
					goto Cybej3NWGR;
				}
			}
			$errmsg .= 'Rmdir ' . $dirtorm . "\n";
		}
	}

	# uninstall-host - remove host-specific stuff
	{
		my $src = catfile( CONF_VARPATH, 'modules', $MODULENAME . '.data', 'uninstall-host.sql' );
		my $local_error = 0;
		
		if( -f $src )
		{
			$errmsg .= '<p>Found uninstall-host.sql...';

			my $fh = undef;
			open( $fh, '<', $src ) or $local_error = 1;

			if( $local_error )
			{
				$error = 140;
				$errmsg .= $!;
				goto Cybej3NWGR;
			}
			my $sql_code = join( ' ', <$fh> );

			$sql_code =~ s/\Q%HOSTID%\E/$host/g;

			unless( &wdbdo( $sql_code ) )
			{

				$errmsg .= "SQL ERROR: " . &dbgeterror();
				if( $halt_on_errors )
				{
					$error = 150;
					goto Cybej3NWGR;
				}
			}

			close $fh;
			$errmsg .= " OK<br>";
		}
	}

# see if there is uninstall.sql
	if( scalar keys %already_installed == 1 )
	{
		my $src = catfile( CONF_VARPATH, 'modules', $MODULENAME . '.data', 'uninstall.sql' );
		my $local_error = 0;

		if( -f $src )
		{
			$errmsg .= '<p>Found uninstall.sql...';

			my $fh = undef;
			open( $fh, '<', $src ) or $local_error = 1;

			if( $local_error )
			{
				$error = 140;
				$errmsg .= $!;
				goto Cybej3NWGR;
			}


			unless( &wdbdo( join( ' ', <$fh> ) ) )
			{

				$errmsg .= "SQL ERROR: " . &dbgeterror();
				if( $halt_on_errors )
				{
					$error = 150;
					goto Cybej3NWGR;
				}
			}

			close $fh;
			$errmsg .= " OK<br>";
		}

	} else
	{
		$errmsg .= "<p>uninstall.sql not run<br>";
	}

	

	
Cybej3NWGR:
	return [ $error, $errmsg ];
}

1;
